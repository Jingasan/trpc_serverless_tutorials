# サービス名
service: trpc-lambda-sls-esbuild

# Serverless Frameworkのバージョン指定
frameworkVersion: "3"

# esbuildのビルド設定
custom:
  esbuild:
    bundle: true # バンドルを行うか行わないか
    minify: false # Minifyを行うか行わないか
    sourcemap: true # SourceMapを作成するかしないか
    exclude: ["aws-sdk"] # 除くNPMパッケージ
    platform: "node" # Node.jsをターゲットとする
    target: "node16" # Node.jsをターゲットとする
    define: { "require.resolve": undefined }
    concurrency: 10
    watch:
      pattern: ["src/**/*.ts"] # srcディレクトリのTSファイルのみを対象とする

# クラウドプロバイダの設定
provider:
  name: aws # デプロイ先のクラウドプロバイダ名
  region: ap-northeast-1 # デプロイ先の地域
  runtime: nodejs16.x # 実行環境
  stage: dev # ステージ名
  timeout: 29 # Lambdaのタイムアウト時間(最大:900s)

# デプロイ対象のファイルの指定
package:
  individually: true

# 以下、tRPCのAPIをAPI Gateway v2とv1で2つ作成
functions:
  http-api: # サービス名＋ステージ名＋この名前でLambdaリソースが作成される
    handler: src/index.handler # ハンドラ関数までのパスの指定
    events: # 以下でLambda呼び出しのイベントを指定
      - httpApi: # 利用するAPIの種類の設定：HTTP API (API Gateway v2)を指定
          path: /{proxy+} # 許可するAPIパス：すべてのパスを容認
          method: any # 許可するHTTPメソッド：すべてのHTTPメソッドを容認
  rest-api: # サービス名＋ステージ名＋この名前でLambdaリソースが作成される
    handler: src/index.handler # ハンドラ関数までのパスの指定
    events: # 以下でLambda呼び出しのイベントを指定
      - http: # 利用するAPIの種類の設定：Rest API (API Gateway v1)を指定
          path: /{proxy+} # 許可するAPIパス：すべてのパスを容認
          method: any # 許可するHTTPメソッド：すべてのHTTPメソッドを容認
          cors: true # CORSを有効化

# プラグインの追加
plugins:
  - serverless-esbuild # sls deployのときにesbuildを行うプラグイン
